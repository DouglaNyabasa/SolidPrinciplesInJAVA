
 SOLID design principles


 1) Single Responsibility Principle

>>> This principle states that “a class should have only one reason to change” which means every class should have a single responsibility or single job or single purpose.
     For example A BankService should not have soo many uses for instance Withdraw , Deposit, Get Loan Info ,Send OTP.
     Instead separate classes should be created.


  2) Open closed Principle (OSP)

  >>> This principle states that “software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification” which means you should be
      able to extend a class behavior, without modifying it.


  3) Liskov substitution Principle (LSP)

  >>> This principle states that “Derived or child classes must be substitutable for their base or parent classes”. In other words, if class A is a subtype of class B, then we
      should be able to replace B with A without BREAKING the program.

  4) Interface Segregation Principle (ISP)

   >>> This principle states that “do not force any client to implement an interface which is irrelevant to them“.Large interfaces should be divided into small ones.


   5)  Dependency Inversion Principle (DIP)

    >>> The principle states that we must use abstraction (abstract classes and interfaces) instead of concrete implementations. High-level modules should not depend
        on the low-level module but both should depend on the abstraction

